/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by upjet. DO NOT EDIT.

package v1beta1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type AlgorithmConfigObservation struct {
}

type AlgorithmConfigParameters struct {

	// Configuration options for using brute force search, which simply implements the
	// standard linear search in the database for each query.
	// +kubebuilder:validation:Optional
	BruteForceConfig []BruteForceConfigParameters `json:"bruteForceConfig,omitempty" tf:"brute_force_config,omitempty"`

	// Configuration options for using the tree-AH algorithm (Shallow tree + Asymmetric Hashing).
	// Please refer to this paper for more details: https://arxiv.org/abs/1908.10396
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	TreeAhConfig []TreeAhConfigParameters `json:"treeAhConfig,omitempty" tf:"tree_ah_config,omitempty"`
}

type BruteForceConfigObservation struct {
}

type BruteForceConfigParameters struct {
}

type ConfigObservation struct {
}

type ConfigParameters struct {

	// The configuration with regard to the algorithms used for efficient search.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	AlgorithmConfig []AlgorithmConfigParameters `json:"algorithmConfig,omitempty" tf:"algorithm_config,omitempty"`

	// The default number of neighbors to find via approximate search before exact reordering is
	// performed. Exact reordering is a procedure where results returned by an
	// approximate search algorithm are reordered via a more expensive distance computation.
	// Required if tree-AH algorithm is used.
	// +kubebuilder:validation:Optional
	ApproximateNeighborsCount *float64 `json:"approximateNeighborsCount,omitempty" tf:"approximate_neighbors_count,omitempty"`

	// The number of dimensions of the input vectors.
	// +kubebuilder:validation:Required
	Dimensions *float64 `json:"dimensions" tf:"dimensions,omitempty"`

	// The distance measure used in nearest neighbor search. The value must be one of the followings:
	// +kubebuilder:validation:Optional
	DistanceMeasureType *string `json:"distanceMeasureType,omitempty" tf:"distance_measure_type,omitempty"`

	// Type of normalization to be carried out on each vector. The value must be one of the followings:
	// +kubebuilder:validation:Optional
	FeatureNormType *string `json:"featureNormType,omitempty" tf:"feature_norm_type,omitempty"`
}

type DeployedIndexesObservation struct {

	// The ID of the DeployedIndex in the above IndexEndpoint.
	DeployedIndexID *string `json:"deployedIndexId,omitempty" tf:"deployed_index_id,omitempty"`

	// A resource name of the IndexEndpoint.
	IndexEndpoint *string `json:"indexEndpoint,omitempty" tf:"index_endpoint,omitempty"`
}

type DeployedIndexesParameters struct {
}

type IndexObservation struct {

	// The timestamp of when the Index was created in RFC3339 UTC "Zulu" format, with nanosecond resolution and up to nine fractional digits.
	CreateTime *string `json:"createTime,omitempty" tf:"create_time,omitempty"`

	// The pointers to DeployedIndexes created from this Index. An Index can be only deleted if all its DeployedIndexes had been undeployed first.
	// Structure is documented below.
	DeployedIndexes []DeployedIndexesObservation `json:"deployedIndexes,omitempty" tf:"deployed_indexes,omitempty"`

	// Used to perform consistent read-modify-write updates.
	Etag *string `json:"etag,omitempty" tf:"etag,omitempty"`

	// an identifier for the resource with format projects/{{project}}/locations/{{region}}/indexes/{{name}}
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Stats of the index resource.
	// Structure is documented below.
	IndexStats []IndexStatsObservation `json:"indexStats,omitempty" tf:"index_stats,omitempty"`

	// Points to a YAML file stored on Google Cloud Storage describing additional information about the Index, that is specific to it. Unset if the Index does not have any additional information.
	MetadataSchemaURI *string `json:"metadataSchemaUri,omitempty" tf:"metadata_schema_uri,omitempty"`

	// The resource name of the Index.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The timestamp of when the Index was last updated in RFC3339 UTC "Zulu" format, with nanosecond resolution and up to nine fractional digits.
	UpdateTime *string `json:"updateTime,omitempty" tf:"update_time,omitempty"`
}

type IndexParameters struct {

	// The description of the Index.
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// The display name of the Index. The name can be up to 128 characters long and can consist of any UTF-8 characters.
	// +kubebuilder:validation:Required
	DisplayName *string `json:"displayName" tf:"display_name,omitempty"`

	// The update method to use with this Index. The value must be the followings. If not set, BATCH_UPDATE will be used by default.
	// +kubebuilder:validation:Optional
	IndexUpdateMethod *string `json:"indexUpdateMethod,omitempty" tf:"index_update_method,omitempty"`

	// The labels with user-defined metadata to organize your Indexes.
	// +kubebuilder:validation:Optional
	Labels map[string]*string `json:"labels,omitempty" tf:"labels,omitempty"`

	// An additional information about the Index
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	Metadata []MetadataParameters `json:"metadata,omitempty" tf:"metadata,omitempty"`

	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	// +kubebuilder:validation:Optional
	Project *string `json:"project,omitempty" tf:"project,omitempty"`

	// The region of the index. eg us-central1
	// +kubebuilder:validation:Required
	Region *string `json:"region" tf:"region,omitempty"`
}

type IndexStatsObservation struct {

	// The number of shards in the Index.
	ShardsCount *float64 `json:"shardsCount,omitempty" tf:"shards_count,omitempty"`

	// The number of vectors in the Index.
	VectorsCount *string `json:"vectorsCount,omitempty" tf:"vectors_count,omitempty"`
}

type IndexStatsParameters struct {
}

type MetadataObservation struct {
}

type MetadataParameters struct {

	// The configuration of the Matching Engine Index.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	Config []ConfigParameters `json:"config,omitempty" tf:"config,omitempty"`

	// Allows inserting, updating  or deleting the contents of the Matching Engine Index.
	// The string must be a valid Cloud Storage directory path. If this
	// field is set when calling IndexService.UpdateIndex, then no other
	// Index field can be also updated as part of the same call.
	// The expected structure and format of the files this URI points to is
	// described at https://cloud.google.com/vertex-ai/docs/matching-engine/using-matching-engine#input-data-format
	// +kubebuilder:validation:Optional
	ContentsDeltaURI *string `json:"contentsDeltaUri,omitempty" tf:"contents_delta_uri,omitempty"`

	// If this field is set together with contentsDeltaUri when calling IndexService.UpdateIndex,
	// then existing content of the Index will be replaced by the data from the contentsDeltaUri.
	// +kubebuilder:validation:Optional
	IsCompleteOverwrite *bool `json:"isCompleteOverwrite,omitempty" tf:"is_complete_overwrite,omitempty"`
}

type TreeAhConfigObservation struct {
}

type TreeAhConfigParameters struct {

	// Number of embeddings on each leaf node. The default value is 1000 if not set.
	// +kubebuilder:validation:Optional
	LeafNodeEmbeddingCount *float64 `json:"leafNodeEmbeddingCount,omitempty" tf:"leaf_node_embedding_count,omitempty"`

	// The default percentage of leaf nodes that any query may be searched. Must be in
	// range 1-100, inclusive. The default value is 10 (means 10%) if not set.
	// +kubebuilder:validation:Optional
	LeafNodesToSearchPercent *float64 `json:"leafNodesToSearchPercent,omitempty" tf:"leaf_nodes_to_search_percent,omitempty"`
}

// IndexSpec defines the desired state of Index
type IndexSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     IndexParameters `json:"forProvider"`
}

// IndexStatus defines the observed state of Index.
type IndexStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        IndexObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// Index is the Schema for the Indexs API. A representation of a collection of database items organized in a way that allows for approximate nearest neighbor (a.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,gcp}
type Index struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              IndexSpec   `json:"spec"`
	Status            IndexStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// IndexList contains a list of Indexs
type IndexList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Index `json:"items"`
}

// Repository type metadata.
var (
	Index_Kind             = "Index"
	Index_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Index_Kind}.String()
	Index_KindAPIVersion   = Index_Kind + "." + CRDGroupVersion.String()
	Index_GroupVersionKind = CRDGroupVersion.WithKind(Index_Kind)
)

func init() {
	SchemeBuilder.Register(&Index{}, &IndexList{})
}
