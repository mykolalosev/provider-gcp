/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by upjet. DO NOT EDIT.

package v1beta1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type FeaturestoreEntitytypeFeatureObservation struct {

	// The timestamp of when the entity type was created in RFC3339 UTC "Zulu" format, with nanosecond resolution and up to nine fractional digits.
	CreateTime *string `json:"createTime,omitempty" tf:"create_time,omitempty"`

	// Used to perform consistent read-modify-write updates.
	Etag *string `json:"etag,omitempty" tf:"etag,omitempty"`

	// an identifier for the resource with format {{entitytype}}/features/{{name}}
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// The timestamp when the entity type was most recently updated in RFC3339 UTC "Zulu" format, with nanosecond resolution and up to nine fractional digits.
	UpdateTime *string `json:"updateTime,omitempty" tf:"update_time,omitempty"`
}

type FeaturestoreEntitytypeFeatureParameters struct {

	// Description of the feature.
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// The name of the Featurestore to use, in the format projects/{project}/locations/{location}/featurestores/{featurestore}/entityTypes/{entitytype}.
	// +crossplane:generate:reference:type=github.com/upbound/provider-gcp/apis/vertexai/v1beta1.FeaturestoreEntitytype
	// +crossplane:generate:reference:extractor=github.com/upbound/upjet/pkg/resource.ExtractResourceID()
	// +kubebuilder:validation:Optional
	Entitytype *string `json:"entitytype,omitempty" tf:"entitytype,omitempty"`

	// Reference to a FeaturestoreEntitytype in vertexai to populate entitytype.
	// +kubebuilder:validation:Optional
	EntitytypeRef *v1.Reference `json:"entitytypeRef,omitempty" tf:"-"`

	// Selector for a FeaturestoreEntitytype in vertexai to populate entitytype.
	// +kubebuilder:validation:Optional
	EntitytypeSelector *v1.Selector `json:"entitytypeSelector,omitempty" tf:"-"`

	// A set of key/value label pairs to assign to the feature.
	// +kubebuilder:validation:Optional
	Labels map[string]*string `json:"labels,omitempty" tf:"labels,omitempty"`

	// The name of the feature. The feature can be up to 64 characters long and can consist only of ASCII Latin letters A-Z and a-z, underscore(_), and ASCII digits 0-9 starting with a letter. The value will be unique given an entity type.
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Type of Feature value. Immutable. https://cloud.google.com/vertex-ai/docs/reference/rest/v1/projects.locations.featurestores.entityTypes.features#ValueType
	// +kubebuilder:validation:Required
	ValueType *string `json:"valueType" tf:"value_type,omitempty"`
}

// FeaturestoreEntitytypeFeatureSpec defines the desired state of FeaturestoreEntitytypeFeature
type FeaturestoreEntitytypeFeatureSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     FeaturestoreEntitytypeFeatureParameters `json:"forProvider"`
}

// FeaturestoreEntitytypeFeatureStatus defines the observed state of FeaturestoreEntitytypeFeature.
type FeaturestoreEntitytypeFeatureStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        FeaturestoreEntitytypeFeatureObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// FeaturestoreEntitytypeFeature is the Schema for the FeaturestoreEntitytypeFeatures API. Feature Metadata information that describes an attribute of an entity type.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,gcp}
type FeaturestoreEntitytypeFeature struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              FeaturestoreEntitytypeFeatureSpec   `json:"spec"`
	Status            FeaturestoreEntitytypeFeatureStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// FeaturestoreEntitytypeFeatureList contains a list of FeaturestoreEntitytypeFeatures
type FeaturestoreEntitytypeFeatureList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []FeaturestoreEntitytypeFeature `json:"items"`
}

// Repository type metadata.
var (
	FeaturestoreEntitytypeFeature_Kind             = "FeaturestoreEntitytypeFeature"
	FeaturestoreEntitytypeFeature_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: FeaturestoreEntitytypeFeature_Kind}.String()
	FeaturestoreEntitytypeFeature_KindAPIVersion   = FeaturestoreEntitytypeFeature_Kind + "." + CRDGroupVersion.String()
	FeaturestoreEntitytypeFeature_GroupVersionKind = CRDGroupVersion.WithKind(FeaturestoreEntitytypeFeature_Kind)
)

func init() {
	SchemeBuilder.Register(&FeaturestoreEntitytypeFeature{}, &FeaturestoreEntitytypeFeatureList{})
}
